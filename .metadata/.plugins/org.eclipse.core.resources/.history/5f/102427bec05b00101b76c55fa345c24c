package kr.or.ddit.controller.chapt05;


import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.vo.Member;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/chapt05/ajax")
public class Chapter05AjaxController {

	/*
	 * 9. Ajax 방식 요청 처리
	 */
	
	// Ajax 방식 요청 처리 페이지
	@GetMapping("/registerForm")
	public String ajaxRegisterForm() {
		log.info("ajaxRegisterForm() 실행......!!");
		return "chapt05/ajaxRegisterForm";
	}
	
	// 1) 객체 타입의 JSON 요청 데이터 @RequestBody 어노테이션을 지정하여 자바빈즈 매개변수로 처리한다.
	@ResponseBody
	@PostMapping("/register01")
	public ResponseEntity<String> ajaxRegister01(@RequestBody Member member) {
		log.info("ajaxRegister01() 실행......!!!");
		log.info("member.getUserId : " + member.getUserId());
		log.info("member.getPassword : " + member.getPassword());
		
		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}
	
	// 2) 객체 타입의 JSON 요청 데이터를 문자열 매개변수로 처리한다.
	@ResponseBody
	@PostMapping("/register02")
//	public ResponseEntity<String> ajaxRegister02(@RequestBody String userId, @RequestBody String password ) {
		public ResponseEntity<String> ajaxRegister02(@RequestBody Map<String, String> param) {
		// 요청 본문에서 데이터가 바인딩 되지 않아 userId 및 password 가 출력되지 않는다.
		// 비동기 요청인 경우, 서버에서 기본 데이터 타입으로는 데이터를 받을 수 없다. 
		// (물론 보낼때 key 없이 데이터만 보내면 받을 수 있지만 보내는 형식이 다르기 때문에 권장하지 않음)
		// 기본적으로 기본 데이터 타입으로 데이터를 받을 시, 
		// userId : {"userId" : "a001", "password" : "1234"} 형태의 문자열이 userId 변수에 저장되거 들어온다.
		// 그렇게 되면 객체안에 있는 해당 각각의 key 와 일치하는 값의 정보를 추출할 수 없으므로 사용할 수 없다.
		// 이때, 단일 요청 파라미터를 받으려면 Collection Map 형태로 하되, @RequestBody 어노테이션을 붙여 사용합니다.
		// 또는 객체로 데이터를 받을 수 있습니다.
		log.info("ajaxRegister02() 실행......!!!");
		log.info("userId : " + param.get("userId"));
		log.info("password : " + param.get("password"));
		
		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}
	
	// 3) 요청 URL에 쿼리파라미터를 붙여서 전달하면 문자열 매개변수로 처리한다.
	@ResponseBody
	@PostMapping("/register02")
//	public ResponseEntity<String> ajaxRegister02(@RequestBody String userId, @RequestBody String password ) {
	public ResponseEntity<String> ajaxRegister02(@RequestBody Map<String, String> param) {
		// 요청 본문에서 데이터가 바인딩 되지 않아 userId 및 password 가 출력되지 않는다.
		// 비동기 요청인 경우, 서버에서 기본 데이터 타입으로는 데이터를 받을 수 없다. 
		// (물론 보낼때 key 없이 데이터만 보내면 받을 수 있지만 보내는 형식이 다르기 때문에 권장하지 않음)
		// 기본적으로 기본 데이터 타입으로 데이터를 받을 시, 
		// userId : {"userId" : "a001", "password" : "1234"} 형태의 문자열이 userId 변수에 저장되거 들어온다.
		// 그렇게 되면 객체안에 있는 해당 각각의 key 와 일치하는 값의 정보를 추출할 수 없으므로 사용할 수 없다.
		// 이때, 단일 요청 파라미터를 받으려면 Collection Map 형태로 하되, @RequestBody 어노테이션을 붙여 사용합니다.
		// 또는 객체로 데이터를 받을 수 있습니다.
		log.info("ajaxRegister02() 실행......!!!");
		log.info("userId : " + param.get("userId"));
		log.info("password : " + param.get("password"));
		
		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}
	
}
