package kr.or.ddit.controller.chapt05;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/chapt05/test02")
public class Chapter05TestController {
	
	// 비동기 이벤트로 파일 데이터 전송 후, 결과 출력을 위한 테스트 페이지
	@GetMapping("/ajaxForm")
	public String testAjaxForm() {
		log.info("testAjaxForm() 실행...!!!");
		return "chapt05/test02/ajaxForm";
	}
	
	// 위 테스트 페이지에서 비동기 요청 시, 목적지로 사용할 메서드
	// 리턴 반환타입, 요청을 받을 메서드 방식은 여러 분들이 자유롭게 설정
	// 요청 URL : /chapt05/test02/upload 로 목적지 설정
	@PostMapping("/upload")
	public ResponseEntity<Map<String, Object>> testUpload(@RequestBody MultipartFile file) {
		log.info("testUpload() 실행...!!!");
		
		Map<String, Object> resultMap  = new HashMap<>();
		
//		String originalName = file.getOriginalFilename();
//		long fileSize = file.getSize();
//		String fileType = file.getContentType();
//		
//		log.info("파일명 : " + originalName);
//		log.info("파일크기 : " + fileSize);
//		log.info("파일타입 : " + fileType);
//		
//	    // JSON 형태로 응답
//	    result.put("fileName", originalName);
//	    result.put("fileSize", fileSize);
//	    result.put("fileType", fileType);
        if (!file.isEmpty()) {
            String originalName = file.getOriginalFilename();
            long size = file.getSize();
            String contentType = file.getContentType();

            log.info("파일명: {}", originalName);
            log.info("크기: {} bytes", size);
            log.info("Content-Type: {}", contentType);

            resultMap.put("fileName", originalName);
            resultMap.put("size", size);
            resultMap.put("contentType", contentType);

            return new ResponseEntity<>(resultMap, HttpStatus.OK);
        } else {
            log.warn("파일이 비어 있음");
            resultMap.put("error", "파일이 비어 있습니다.");
            return new ResponseEntity<>(resultMap, HttpStatus.BAD_REQUEST);
        }
		
	}

}
